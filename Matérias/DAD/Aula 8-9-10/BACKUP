@app.route('/alunos', methods=['POST'])
def cria_aluno():
    dici = request.json
    lenght_alunos = len(database['ALUNO'])
    for aluno in range(lenght_alunos):
        if dici['id'] == database[aluno]['id']:
            dic_erro = {'erro': 'id ja utilizada'}
            return jsonify(dic_erro), 400
        else:
            database['ALUNO'].append(dici)
    return jsonify(database['ALUNO'])

    @app.route('/alunos', methods=['POST'])
def cria_aluno():
    dici = request.json
    novo_id = dici['id']
    lenght_alunos = len(database['ALUNO'])
    for alunos in range(lenght_alunos):
        if novo_id != database['ALUNO'][alunos]['id']:
            database['ALUNO'].append(dici)
        else:
            dic_erro = {'erro': 'id ja utilizada'}
            return jsonify(dic_erro), 400
    return jsonify(database['ALUNO'])

    @app.route('/alunos', methods=['POST'])
    def cria_aluno():
        dici = request.json
        database['ALUNO'].append(dici)
        return jsonify(database['ALUNO'])

for campos in range(tamanho_lista_campos):
        if lista_campos[campos] == "id_professor":
            if 'id_professor' in dici:
                tamanho_prof = len(database['PROFESSOR'])
                for prof in range(tamanho_prof):
                    profs = database['PROFESSOR']
                    id_prof_a_procurar = profs[prof]['id']
                    if profs == []:
                        dic_erro_prof = {'erro': 'Professor não cadastrado'}
                        return jsonify(dic_erro_prof), 400
                    ''' if id_prof_a_procurar in dici: #dici['id_professor'] == database['PROFESSOR'][prof]['id_professor']
                            pass
                        elif id_prof_a_procurar not in dici:
                            dic_erro_prof = {'erro': 'Professor não cadastrado'}
                            return jsonify(dic_erro_prof), 400'''
            if 'id_professor' not in dici:
                pass #Prof não adicionado
        elif lista_campos[campos] not in dici:
            dic_erro = {'erro': '{} faltando'.format(lista_campos[campos])}
            return jsonify(dic_erro), 400